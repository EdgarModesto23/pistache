Description: disable gmock 1.11 tests
Author: Andrea Pappacoda <andrea@pappacoda.it>
Forwarded: not-needed
Last-Update: 2023-02-15

diff --git a/tests/meson.build b/tests/meson.build
index d747615..19293b9 100644
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -4,7 +4,7 @@
 
 curl_dep = dependency('libcurl')
 gtest_main_dep = dependency('gtest', main: true, fallback: ['gtest', 'gtest_main_dep'])
-gmock_dep = dependency('gmock', version: '>=1.11.0', fallback: ['gtest', 'gmock_dep'])
+gmock_dep = dependency('gmock', fallback: ['gtest', 'gmock_dep'])
 cpp_httplib_dep = dependency('cpp-httplib', fallback: ['cpp-httplib', 'cpp_httplib_dep'])
 
 pistache_test_files = [
diff --git a/tests/mime_test.cc b/tests/mime_test.cc
index 14252f7..01d70f9 100644
--- a/tests/mime_test.cc
+++ b/tests/mime_test.cc
@@ -4,7 +4,6 @@
  * SPDX-License-Identifier: Apache-2.0
  */
 
-#include <gmock/gmock-matchers.h>
 #include <gtest/gtest.h>
 
 #include <pistache/http.h>
@@ -14,7 +13,6 @@
 
 using namespace Pistache::Http;
 using namespace Pistache::Http::Mime;
-using testing::ThrowsMessage;
 
 TEST(mime_test, basic_test)
 {
@@ -158,21 +156,6 @@ TEST(mime_test, invalid_parsing)
     ASSERT_THROW(
         MediaType::fromString("text/html; q=0.21; charset=ISO-8859-4;  "),
         HttpError);
-
-    // From https://github.com/pistacheio/pistache/pull/1077
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=0."); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=00.0"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=0.0.0"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=.0"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=."); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=1."); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=1.001"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=.1"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=0.1234"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=a"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=0.a"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=1.a"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
-    EXPECT_THAT([] { MediaType::fromString("text/html; q=a.1"); }, ThrowsMessage<HttpError>("Invalid quality factor"));
 }
 
 TEST(mime_test, should_parse_case_insensitive_issue_179)
